import { Component, OnChanges, SimpleChanges, OnInit } from '@angular/core';
import { I${upperName}Props, I${upperName}States, I${upperName}Output } from './${inputName}.component.d';
import { ReactComponentBase } from '@app/components/reactComponentBase/reactComponentBase.component';
import { ${upperName}Service } from './${inputName}.component.service';

@Component({
    selector: '${cmpSelector}',
    ${componentInlineTemplate ? `template: \`\n   <p>\n  \t\t${inputName} Works!\n   </p>\n  \`` : `templateUrl: './${inputName}.component.html'`},
    ${componentInlineStyle ? 'styles: []' : `styleUrls: ['./${inputName}.component.${defaultsStyleExt}']`}${componentViewEncapsulation !== 'Emulated' ? `,\n  encapsulation: ViewEncapsulation.${componentViewEncapsulation}` : ''}${componentChangeDetection !== 'Default' ? `,\n  changeDetection: ChangeDetectionStrategy.OnPush` : ''},
    providers: [${upperName}Service]
})

export class ${upperName}Component extends ReactComponentBase<I${upperName}Props, I${upperName}States, I${upperName}Output> implements OnInit, OnChanges {
    constructor(private svc: ${upperName}Service) {
        super();
    }

    ngOnInit() {
        this.setStates(this.svc.initDelegate(this.props, this.states));
    }

    ngOnChanges(changes: SimpleChanges): void {
        this.setStates(this.svc.changeDelegate(changes.props.previousValue, changes.props.currentValue, this.states));
    }
}
